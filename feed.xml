<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://deveshparagiri.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://deveshparagiri.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-26T20:40:27+00:00</updated><id>https://deveshparagiri.github.io/feed.xml</id><title type="html">blank</title><subtitle>Dev Paragiri&apos;s personal website. </subtitle><entry><title type="html">AI Agent vs Workflow</title><link href="https://deveshparagiri.github.io/blog/2025/agent-vs-workflow/" rel="alternate" type="text/html" title="AI Agent vs Workflow"/><published>2025-03-26T20:00:00+00:00</published><updated>2025-03-26T20:00:00+00:00</updated><id>https://deveshparagiri.github.io/blog/2025/agent-vs-workflow</id><content type="html" xml:base="https://deveshparagiri.github.io/blog/2025/agent-vs-workflow/"><![CDATA[<h2 id="introduction"><strong>Introduction</strong></h2> <p><br/></p> <p>AI agents are all the hype. 2025 is touted to be the year of agents. Some say they’ll take over all our jobs; others call them an over-engineered gimmick. Regardless of where you stand, one thing is clear: <strong>agents are here to stay</strong>, and they’re poised to reshape how developers build and interact with software.</p> <p>But before you jump on the hype train, it’s worth asking – <em>what actually sets agents apart from traditional AI workflows?</em> And when should you use one over another?</p> <p>This blog breaks down the technical differences between agents and workflows – just the key details with implications for your tech stack.</p> <p><br/></p> <h2 id="agents-vs-workflows---tldr"><strong>Agents vs Workflows - TLDR</strong></h2> <p><br/></p> <table> <thead> <tr> <th><strong>Feature</strong></th> <th><strong>AI Agent</strong></th> <th><strong>AI Workflow</strong></th> </tr> </thead> <tbody> <tr> <td>Core Idea</td> <td>Autonomous Entity with goals + reasoning</td> <td>Perform a defined sequence of tasks</td> </tr> <tr> <td>State</td> <td>Has memory, state, and internal feedback loops</td> <td>Usually static or explicit state</td> </tr> <tr> <td>Flexibility</td> <td>Dynamic, pivots according to the requirement</td> <td>Predefined, changes require editing the flow</td> </tr> <tr> <td>Determinism</td> <td>Non-deterministic; same prompt ≠ same output</td> <td>Deterministic (mostly)</td> </tr> <tr> <td>Sample use-case</td> <td>Open-ended tasks, multiple steps, vague goals</td> <td>Structured, repeated, and known flows</td> </tr> </tbody> </table> <p><br/></p> <h2 id="so-what-is-an-agent"><strong>So what is an Agent?</strong></h2> <p><br/> Think of an agent as your mini-employee with a brain, a set of tasks, and access to tools.</p> <p>You give it a goal and it figures out how to get there – which tools to use, questions to ask, and maybe even ask clarifying questions. The agent has full autonomy every step of the way, including the output.</p> <p>An agent can evaluate it’s own response and choose to restart it’s task. Effectively, the agent can optimize it’s own processes.</p> <p><br/></p> <h4 id="core-behaviors"><strong>Core Behaviors:</strong></h4> <ul> <li><strong>Goal-oriented:</strong> You say “Summarize this repo and build a README,” it plans its own steps.</li> <li><strong>Tool-using:</strong> Calls APIs, scrapes data, runs subprocesses — whatever gets the job done.</li> <li><strong>Memory-aware:</strong> Keeps track of prior steps, retries intelligently.</li> <li><strong>Autonomous (ish):</strong> Can decide its own flow, within guardrails.</li> </ul> <p><br/></p> <h3 id="sample-agent-in-action"><strong>Sample Agent in Action</strong></h3> <p><br/></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/agent_vs_workflow/asset.webp" sizes="95vw"/> <img src="/assets/img/agent_vs_workflow/asset.webp" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">AI Agent Decision Flow Diagram. Source: <a href="https://www.anthropic.com/engineering/building-effective-agents">Anthropic</a></figcaption> </figure> </div> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Junior Dev</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">search_docs</span><span class="p">,</span> <span class="n">write_code</span><span class="p">,</span> <span class="n">run_tests</span><span class="p">,</span> <span class="n">evaluate_code</span><span class="p">,</span> <span class="n">human_input</span><span class="p">],</span>
    <span class="n">memory</span><span class="o">=</span><span class="nc">Memory</span><span class="p">(),</span>
<span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">agent</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="sh">"</span><span class="s">Create Quarto Docs for this repo.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p><br/></p> <h2 id="so-what-is-a-workflow"><strong>So what is a Workflow?</strong></h2> <p><br/></p> <p>A <strong>workflow</strong> is more like a flowchart. You lay out the steps: “Do A, then B, then C.” It’s deterministic, composable, and rock-solid for anything structured.</p> <p>Think CI/CD pipelines, document processing chains, or RAG pipelines.</p> <p><br/></p> <h4 id="core-behaviors-1"><strong>Core Behaviors:</strong></h4> <ul> <li><strong>Step-by-step logic:</strong> The flow is explicit and predictable.</li> <li><strong>Composable:</strong> You can chain blocks together easily.</li> <li><strong>Debuggable:</strong> You know exactly where something breaks.</li> <li><strong>Efficient:</strong> Less overhead, faster runtime.</li> </ul> <p><br/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">chain</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">:</span> <span class="nc">RunnablePassthrough</span><span class="p">()}</span>
    <span class="o">|</span> <span class="p">{</span><span class="sh">"</span><span class="s">docs</span><span class="sh">"</span><span class="p">:</span> <span class="n">retriever</span><span class="p">,</span> <span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">]}</span>
    <span class="o">|</span> <span class="p">{</span><span class="sh">"</span><span class="s">answer</span><span class="sh">"</span><span class="p">:</span> <span class="n">rag_chain</span><span class="p">}</span>
<span class="p">)</span>
</code></pre></div></div> <p><br/></p> <h2 id="what-about-a-hybrid"><strong>What about a hybrid?</strong></h2> <p><br/></p> <p>Some of the best systems mix both. You could use a workflow to spawn agents, or let agents call reliable AI workflows. For example:</p> <ul> <li>AI agent for making a landing page calls several workflows - outline generator, code generator, deployment workflow</li> </ul> <p>You get the flexibility of agents without compromising on the reliability of workflows.</p> <p><br/></p> <h2 id="conclusion"><strong>Conclusion</strong></h2> <p><br/></p> <p>Agents are <em>not</em> here to replace workflows. They’re here to unlock new kinds of problems we couldn’t automate before.</p> <p>Use <strong>agents</strong> when you want flexible, autonomous decision-making.</p> <p>Use <strong>workflows</strong> when you want reliable, fast, auditable pipelines.</p> <p>Sometimes you need brains. Sometimes you need structure. And sometimes — you need both.</p> <p><br/></p> <h2 id="helpful-links-and-resources"><strong>Helpful Links and Resources</strong></h2> <p><br/></p> <ul> <li><a href="https://www.youtube.com/watch?v=tx5OapbK-8A">Build your first agent</a></li> <li><a href="https://www.youtube.com/watch?v=4nZl32FwU-o">Multi-agent architectures</a></li> <li><a href="https://www.langflow.org/">Low-code agent builder</a></li> <li><a href="https://github.com/e2b-dev/awesome-ai-agents">AI Agent Repository</a></li> </ul>]]></content><author><name></name></author><category term="code"/><category term="ai"/><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Deploying a node.JS app to AWS EC2</title><link href="https://deveshparagiri.github.io/blog/2024/deploy-nodejs/" rel="alternate" type="text/html" title="Deploying a node.JS app to AWS EC2"/><published>2024-11-20T15:59:00+00:00</published><updated>2024-11-20T15:59:00+00:00</updated><id>https://deveshparagiri.github.io/blog/2024/deploy-nodejs</id><content type="html" xml:base="https://deveshparagiri.github.io/blog/2024/deploy-nodejs/"><![CDATA[<h2 id="introduction"><strong>Introduction</strong></h2> <p>You’ve successfully built your application, and now you’re looking forward to deploying it! This blog covers the basics of <strong>AWS EC2</strong>, setup, and deployment. <br/> <br/></p> <h2 id="setup-an-aws-ec2-instance"><strong>Setup an AWS EC2 Instance</strong></h2> <p><br/></p> <h3 id="what-even-is-ec2"><strong>What even is EC2?</strong></h3> <p><strong>EC2</strong> stands for <strong>Elastic Cloud Compute</strong> and is a virtual machine where you can deploy your applications. What’s so cool about it? It allows for easy <strong>scaling</strong> to handle more requests coming into your application when the need arises, making it easy to handle varying demand. It’s also quite versatile, making it a great choice for developers.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog1/balancer.png" sizes="95vw"/> <img src="/assets/img/blog1/balancer.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/></p> <h3 id="why-are-we-using-it"><strong>Why are we using it?</strong></h3> <p>It’s simple, ease of use, and quick setup makes it a great first choice for those getting started with development. Above all, it’s cheap because of <strong>“on-demand” scaling</strong> helping to only pull out the big guns when absolutely required. Alternatively, we could also use an <strong>Azure VM</strong> or the <strong>Google Cloud Engine (GCE)</strong> to deploy our app, which I will cover in later blogs.</p> <p><br/></p> <h3 id="getting-started"><strong>Getting Started</strong></h3> <p>Let’s set up the AWS instance and connect to it via <strong>SSH</strong>.</p> <h4 id="1-login-to-your-aws-account-root-user">1. Login to your AWS account (Root User)</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog1/awslogin.png" sizes="95vw"/> <img src="/assets/img/blog1/awslogin.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/></p> <h4 id="2-launching-an-instance">2. Launching an instance</h4> <p>Under the <strong>EC2</strong>, choose <strong>launch instance</strong>. For this application, we will use <strong>AWS Linux</strong> as our OS Image due to its tight integration with AWS and ease of use. Alternatively, you could also use <strong>Ubuntu</strong> but will have to make some changes (<code class="language-plaintext highlighter-rouge">apt-get</code> vs. <code class="language-plaintext highlighter-rouge">yum</code>) for the next steps during installing dependencies.</p> <p>Choose <strong>t2.micro</strong> for instance type – simplest instance, and is very cost effective. If your application is quite large and compute intensive, shift to <strong>t2.medium</strong> for ensuring enough memory capacity.</p> <p>We create a new <strong>key pair</strong>, which will enable us to connect to our instance through <strong>SSH</strong> and get started with setting up. A <code class="language-plaintext highlighter-rouge">.pem</code> file will be downloaded to your local machine.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog1/awskeypair.png" sizes="95vw"/> <img src="/assets/img/blog1/awskeypair.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>We allow all traffic, so we can access the instance from anywhere. We will be adding some inbound rules later on to make our port accessible to the public DNS.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog1/awsnetwork.png" sizes="95vw"/> <img src="/assets/img/blog1/awsnetwork.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/></p> <h4 id="3-connecting-to-instance-ssh">3. Connecting to Instance (SSH)</h4> <p>To connect, you must first download the <code class="language-plaintext highlighter-rouge">.pem</code> file from when you set up the EC2 instance. Execute the below commands.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>400 &lt;path/to/security-key.pem&gt; <span class="c">#read permissions</span>

ssh <span class="nt">-i</span> &lt;path/to/security-key.pem&gt; ec2-user@ec2-&lt;Ipv4 Address&gt;.compute.amazonaws.com
</code></pre></div></div> <p><br/></p> <h2 id="installing-dependencies"><strong>Installing Dependencies</strong></h2> <p>The dependencies we will require include:</p> <ul> <li>node</li> <li>git</li> <li>nginx</li> <li>pm2</li> </ul> <p>Ensure all packages are up-to-date</p> <p>Ensure all packages are up-to-date</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum upgrade <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>yum update
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Installing Node</span>

curl <span class="nt">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
<span class="nb">.</span> ~/.nvm/nvm.sh
nvm <span class="nb">install </span>node

node <span class="nt">-v</span>
<span class="c"># v22.9.0</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Installing and Setting up Git</span>

yum <span class="nb">install </span>git <span class="nt">-y</span>

ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"your email"</span>
<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>ssh-agent <span class="nt">-s</span><span class="si">)</span><span class="s2">"</span>
ssh-add ~/.ssh/id_ed25519

<span class="nb">cat</span> ~/.ssh/id_ed25519.pub
ssh-keyscan github.com <span class="o">&gt;&gt;</span> ~/.ssh/known_hosts
ssh <span class="nt">-T</span> git@github.com

git clone &lt;Your Repository&gt;
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Installing pm2 and nginx</span>

npm <span class="nb">install</span> <span class="nt">-g</span> pm2

<span class="nb">sudo </span>yum <span class="nb">install </span>nginx <span class="nt">-y</span>
<span class="nb">sudo </span>systemctl start nginx
<span class="nb">sudo </span>systemctl status nginx
</code></pre></div></div> <p><br/></p> <h2 id="deployment"><strong>Deployment</strong></h2> <p>We will use nginx as a reverse proxy forwarding all inbound calls from port 80 to our application. For now, we will only focus on HTTP. Now, under <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-available/</code> modify the <code class="language-plaintext highlighter-rouge">default</code> config.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
    listen 80<span class="p">;</span>
    server_name your-server-ip-or-domain<span class="p">;</span>

    location / <span class="o">{</span>
        proxy_pass http://127.0.0.1:3000<span class="p">;</span> <span class="c"># Replace with your app's port</span>
        proxy_http_version 1.1<span class="p">;</span>
        proxy_set_header Upgrade <span class="nv">$http_upgrade</span><span class="p">;</span>
        proxy_set_header Connection <span class="s1">'upgrade'</span><span class="p">;</span>
        proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
        proxy_cache_bypass <span class="nv">$http_upgrade</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>We test the nginx config and restart to apply new changes.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nginx <span class="nt">-t</span>
<span class="nb">sudo </span>systemctl restart nginx
</code></pre></div></div> <p>To learn more about nginx, refer this <a href="https://nginx.org/en/docs/beginners_guide.html">guide</a>.</p> <p>Finally, we use pm2 to ensure that the application runs continuously and restarts automatically if it crashes.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pm2 start app.js <span class="nt">--name</span> <span class="s2">"my-app"</span> <span class="c"># Replace `app.js` with your main file name</span>
pm2 save

pm2 list <span class="c"># Shows if the app is running</span>
pm2 log <span class="c"># Check deployment log</span>

pm2 save <span class="c"># Save process list to enable auto-restart on server reboot</span>
pm2 startup systemd <span class="c"># Generate startup script for reboot</span>
</code></pre></div></div> <p>You should now be able to access the application through the <code class="language-plaintext highlighter-rouge">Ipv4</code> DNS of your server!</p>]]></content><author><name></name></author><category term="code"/><category term="cloud"/><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Pycon India 2023 — trip report</title><link href="https://deveshparagiri.github.io/blog/2023/pycon-india-2023trip-report/" rel="alternate" type="text/html" title="Pycon India 2023 — trip report"/><published>2023-10-08T05:53:54+00:00</published><updated>2023-10-08T05:53:54+00:00</updated><id>https://deveshparagiri.github.io/blog/2023/pycon-india-2023trip-report</id><content type="html" xml:base="https://deveshparagiri.github.io/blog/2023/pycon-india-2023trip-report/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Secure AI Bot for Private Data</title><link href="https://deveshparagiri.github.io/blog/2023/secure-ai-bot-for-private-data/" rel="alternate" type="text/html" title="Secure AI Bot for Private Data"/><published>2023-09-19T12:29:15+00:00</published><updated>2023-09-19T12:29:15+00:00</updated><id>https://deveshparagiri.github.io/blog/2023/secure-ai-bot-for-private-data</id><content type="html" xml:base="https://deveshparagiri.github.io/blog/2023/secure-ai-bot-for-private-data/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Deploy a Flask Web App to AWS Beanstalk (CI/CD with Git)</title><link href="https://deveshparagiri.github.io/blog/2023/deploy-a-flask-web-app-to-aws-beanstalk-cicd-with-git/" rel="alternate" type="text/html" title="Deploy a Flask Web App to AWS Beanstalk (CI/CD with Git)"/><published>2023-08-25T12:35:04+00:00</published><updated>2023-08-25T12:35:04+00:00</updated><id>https://deveshparagiri.github.io/blog/2023/deploy-a-flask-web-app-to-aws-beanstalk-cicd-with-git</id><content type="html" xml:base="https://deveshparagiri.github.io/blog/2023/deploy-a-flask-web-app-to-aws-beanstalk-cicd-with-git/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Hosting a Website Using AWS EC2</title><link href="https://deveshparagiri.github.io/blog/2023/hosting-a-website-using-aws-ec2/" rel="alternate" type="text/html" title="Hosting a Website Using AWS EC2"/><published>2023-08-08T05:53:40+00:00</published><updated>2023-08-08T05:53:40+00:00</updated><id>https://deveshparagiri.github.io/blog/2023/hosting-a-website-using-aws-ec2</id><content type="html" xml:base="https://deveshparagiri.github.io/blog/2023/hosting-a-website-using-aws-ec2/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">OpenAI Whisper API for Transcribing Any YouTube Video</title><link href="https://deveshparagiri.github.io/blog/2023/openai-whisper-api-for-transcribing-any-youtube-video/" rel="alternate" type="text/html" title="OpenAI Whisper API for Transcribing Any YouTube Video"/><published>2023-04-10T09:24:00+00:00</published><updated>2023-04-10T09:24:00+00:00</updated><id>https://deveshparagiri.github.io/blog/2023/openai-whisper-api-for-transcribing-any-youtube-video</id><content type="html" xml:base="https://deveshparagiri.github.io/blog/2023/openai-whisper-api-for-transcribing-any-youtube-video/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">My solo trip to Tiruvannamalai (Journal entry)</title><link href="https://deveshparagiri.github.io/blog/2022/my-solo-trip-to-tiruvannamalai-journal-entry/" rel="alternate" type="text/html" title="My solo trip to Tiruvannamalai (Journal entry)"/><published>2022-12-08T16:30:16+00:00</published><updated>2022-12-08T16:30:16+00:00</updated><id>https://deveshparagiri.github.io/blog/2022/my-solo-trip-to-tiruvannamalai-journal-entry</id><content type="html" xml:base="https://deveshparagiri.github.io/blog/2022/my-solo-trip-to-tiruvannamalai-journal-entry/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Journal Entry (2 hours in Chennai)</title><link href="https://deveshparagiri.github.io/blog/2022/journal-entry-2-hours-in-chennai/" rel="alternate" type="text/html" title="Journal Entry (2 hours in Chennai)"/><published>2022-11-16T04:19:53+00:00</published><updated>2022-11-16T04:19:53+00:00</updated><id>https://deveshparagiri.github.io/blog/2022/journal-entry-2-hours-in-chennai</id><content type="html" xml:base="https://deveshparagiri.github.io/blog/2022/journal-entry-2-hours-in-chennai/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Getting started with multivariate linear regression</title><link href="https://deveshparagiri.github.io/blog/2021/getting-started-with-multivariate-linear-regression/" rel="alternate" type="text/html" title="Getting started with multivariate linear regression"/><published>2021-08-19T16:22:50+00:00</published><updated>2021-08-19T16:22:50+00:00</updated><id>https://deveshparagiri.github.io/blog/2021/getting-started-with-multivariate-linear-regression</id><content type="html" xml:base="https://deveshparagiri.github.io/blog/2021/getting-started-with-multivariate-linear-regression/"><![CDATA[]]></content><author><name></name></author></entry></feed>